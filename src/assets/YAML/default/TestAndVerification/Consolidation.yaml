# yaml-language-server: $schema=../../schemas/dsomm-schema-test-and-verification.json
---
Test and Verification:
  Consolidation:
    Fix based on accessibility:
      uuid: 0c10a7f7-f78f-49f2-943d-19fdef248fed
      risk:
        Overwhelming volume of security findings from automated testing tools. This might lead to ignorance of findings.
      measure: |-
        Implement a simple risk-based prioritization framework for vulnerability remediation based on accessibility of the applications.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 4
      level: 3
      meta:
        implementationGuide: |-
          Develop a scoring system for asset accessibility, considering factors like:
          - Whether the asset is internet-facing (highly recommended)
          - The number of network hops required to reach the asset (recommended)
          - Authentication requirements for access (recommended)
      dependsOn:
        - uuid:44f2c8a9-4aaa-4c72-942d-63f78b89f385 # Treatment of defects with severity high or higher:
        #- uuid:3260a15f-2df0-4173-8790-f11de2cb525a # Access applications accessibility TODO
        - uuid:2a44b708-734f-4463-b0cb-86dc46344b2f # Inventory of production components
      implementation:
      references:
        samm2:
          - I-DM-3-B
        iso27001-2017:
          - 16.1.4
          - 8.2.1
          - 8.2.2
          - 8.2.3
        iso27001-2022:
          - 5.25
          - 5.12
          - 5.13
          - 5.10
      tags: ["vuln-action", "defect-management"]
    Advanced visualization of defects:
      uuid: 7a82020c-94d1-471c-bbd3-5f7fe7df4876
      risk:
        Correlation of the vulnerabilities of different tools to have an overview
        of the the overall security level per component/project/team is not given.
      measure: Findings are visualized per component/project/team.
      difficultyOfImplementation:
        knowledge: 2
        time: 4
        resources: 1
      usefulness: 2
      level: 4
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/owasp-defectdojo
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/purify
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/business-friendly-vulnerability-metrics
      references:
        samm2:
          - I-DM-3-B
        iso27001-2017:
          - 16.1.4
          - 8.2.1
          - 8.2.2
          - 8.2.3
        iso27001-2022:
          - 5.25
          - 5.12
          - 5.13
          - 5.10
      isImplemented: false
      evidence: ""
      comments: ""
    Integration of vulnerability issues into the development process:
      uuid: ce970c9b-da94-41cf-bd78-8c15357b7e8e
      risk:
        To read console output of the build server to search for vulnerabilities
        might be difficult. Also, to check a vulnerability management system might
        not be a daily task for a developer.
      measure: Vulnerabilities are tracked in the teams issue system (e.g. jira).
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 2
      level: 3
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/sast
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/dast
      references:
        samm2:
          - I-DM-2-B
        iso27001-2017:
          - Not explicitly covered by ISO 27001 - too specific
          - 16.1.4
          - 16.1.5
          - 16.1.6
        iso27001-2022:
          - Not explicitly covered by ISO 27001 - too specific
          - 5.25
          - 5.26
          - 5.27
      isImplemented: false
      evidence: ""
      comments: ""
    Reproducible defect tickets:
      uuid: 27337442-e4b1-4e87-8dc9-ce86fbb79a39
      risk:
        Vulnerability descriptions are hard to understand by staff from operations
        and development.
      measure:
        Vulnerabilities include the test procedure to give the staff from operations
        and development the ability to reproduce vulnerabilities. This enhances the
        understanding of vulnerabilities and therefore the fix have a higher quality.
      difficultyOfImplementation:
        knowledge: 3
        time: 2
        resources: 2
      usefulness: 2
      level: 4
      implementation: []
      references:
        samm2:
          - I-DM-2-B
        iso27001-2017:
          - 16.1.4
          - 8.2.1
          - 8.2.2
          - 8.2.3
        iso27001-2022:
          - 5.25
          - 5.12
          - 5.13
          - 5.10
      isImplemented: false
      evidence: ""
      comments: ""
    Simple false positive treatment:
      uuid: c1acc8af-312e-4503-a817-a26220c993a0
      risk:
        As false positive occur during each test, all vulnerabilities might be
        ignored. Specially, if tests are automated an run daily.
      measure: |-
        Findings from security tests must be triaged and outcomes persisted/documented to:
          - Prevent re-analysis of known issues in subsequent test runs
          - Track accepted risks vs false positives
          - Enable consistent decision-making across teams
        
        At this maturity level, a simple tracking system suffices - tools need only distinguish between "triaged" and "untriaged" findings, without complex categorization. Some tools refer to this as "suppression" of findings.
        
        Samples for false positive handling:
          - [OWASP Dependency Check](https://jeremylong.github.io/DependencyCheck/general/suppression.html)
          - [Kubescape with VEX](https://kubescape.io/blog/2023/12/07/kubescape-support-for-vex-generation/)
          - [OWASP DefectDojo Risk Acceptance](https://docs.defectdojo.com/en/working_with_findings/findings_workflows/risk_acceptances/) and [False Positive Handling](https://docs.defectdojo.com/en/working_with_findings/intro_to_findings/#triage-vulnerabilities-using-finding-status)
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 4
      level: 1
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/owasp-defect-dojo
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/purify
      references:
        samm2:
          - I-DM-2-A
        iso27001-2017:
          - Not explicitly covered by ISO 27001 - too specific
          - 16.1.6
        iso27001-2022:
          - Not explicitly covered by ISO 27001 - too specific
          - 5.27
      isImplemented: false
      evidence: ""
      comments: ""
    Simple visualization of defects:
      uuid: 55f4c916-3a34-474d-ad96-9a9f7a4f6a83
      risk:
        The security level of a component is not visible. Therefore, the motivation
        to enhance the security is not give.
      measure: Vulnerabilities are simple visualized.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 3
      level: 2
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/owasp-dependency-che
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/dependencyTrack
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/logparser-jenkins-pl
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/owasp-defectdojo
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/purify
      references:
        samm2:
          - I-DM-1-B
        iso27001-2017:
          - 16.1.4
          - 8.2.1
          - 8.2.2
          - 8.2.3
        iso27001-2022:
          - 5.25
          - 5.12
          - 5.13
          - 5.10
      isImplemented: false
      evidence: ""
      comments: ""
    Treatment of all defects:
      uuid: b2f77606-3e6c-41e9-b72d-7c0b1d3d581d
      risk: Vulnerabilities with severity low are not visible.
      measure: All vulnerabilities are added to the quality gate.
      difficultyOfImplementation:
        knowledge: 3
        time: 4
        resources: 1
      usefulness: 2
      level: 5
      implementation: []
      references:
        samm2:
          - I-DM-2-B
        iso27001-2017:
          - 16.1.4
          - 12.6.1
        iso27001-2022:
          - 8.8
          - 5.25
      tags: ["vuln-action", "defect-management"]
      comments: ""
    Treatment of defects with severity high or higher:
      uuid: 44f2c8a9-4aaa-4c72-942d-63f78b89f385
      risk: Vulnerabilities with severity high or higher are not visible.
      measure:
        Vulnerabilities with severity high or higher are added to the quality
        gate.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 4
      level: 1
      comments: False positive analysis, specially for static analysis, is time consuming.
      references:
        samm2:
          - I-DM-2-B
        iso27001-2017:
          - 16.1.4
          - 12.6.1
        iso27001-2022:
          - 8.8
          - 5.25
      implementation: []
      tags: ["vuln-action", "defect-management"]
      evidence: ""
    Treatment of defects with severity middle:
      uuid: 9cac3341-fe83-4079-bef2-bfc4279eb594
      risk: Vulnerabilities with severity middle are not visible.
      measure: Vulnerabilities with severity middle are added to the quality gate.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 3
      level: 3
      comments: False positive analysis, specially for static analysis, is time consuming.
      references:
        samm2:
          - I-DM-2-B
        iso27001-2017:
          - 16.1.4
          - 12.6.1
        iso27001-2022:
          - 8.8
          - 5.25
      implementation: []
      tags: ["vuln-action", "defect-management"]
    Usage of a vulnerability management system:
      uuid: 85ba5623-84be-4219-8892-808837be582d
      risk:
        Maintenance of false positives in each tool enforces a high workload.
        In addition a correlation of the same finding from different tools is not
        possible.
      measure:
        Aggregation of vulnerabilities in one tool reduce the workload to handle them, e.g. mark as false positives.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 2
      usefulness: 2
      dependsOn:
        - uuid:f2f0f274-c1a0-4501-92fe-7fc4452bc8ad # EPSS/CISA KEV
        - uuid:6217fe11-5ed7-4cf4-9de4-555bcfa6fe87 # Each team has a security champion
        - uuid:185d5a74-19dc-4422-be07-44ea35226783 # Office Hours
      level: 3
      description: |-
        For known vulnerabilities a processes to estimate the exploit ability of a vulnerability is recommended.
        
        To implement a security culture including training, office hours and security champions can help integrating 
        security scanning at scale. Such activities help to understand why a vulnerability is potentially critical and needs handling.
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/owasp-defectdojo
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/purify
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/SecObserve
      references:
        samm2:
          - I-DM-1-B
        iso27001-2017:
          - 12.6.1
          - 16.1.3
          - 16.1.4
          - 16.1.5
          - 16.1.6
        iso27001-2022:
          - 8.8
          - 6.8
          - 5.25
          - 5.26
          - 5.27
    Integration in development process:
      uuid: 123e4567-e89b-12d3-a456-426614174000
      risk: |-
        Not integrating vulnerability handling into the development process may result in product teams ignoring findings. 
        
        Security joke: We will gain 100% false negatives.
      measure: |-
        Integration of findings into the development process. E.g. adding findings to the backlog of products teams.
      description: |-
        Validating Findings by Security Engineers Pros:
        - Ensures accuracy and relevance of findings before they reach product teams
        - Reduces false positives, saving development teams time and effort
        - Might provides a layer of expertise in assessing the severity and impact of vulnerabilities

        Validating Findings by Security Engineers Cons:
        - Requires a sufficient number of skilled security engineers, which might be challenging for some organizations
        - May slow down the process if security engineers are overloaded with validation tasks
        - For Software Composition Analysis findings (known vulnerabilities) I, as a sec. eng., struggle to analysis if it is a false positive/true positive due to a lack of insights in the application

        Pushing Findings Directly to Product Teams Pros:
        - Accelerates the process by immediately notifying product teams of potential vulnerabilities
        - Empowers product teams to take swift action in addressing security issues
        Pushing Findings Directly to Product Teams Cons:
        - Increases the workload on product teams, potentially leading to frustration
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 3
      level: 3
      dependsOn: []
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/jira
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/owasp-defectdojo
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/purify
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/defectdojo-client
      references:
        samm2:
          - I-DM-3-B
        iso27001-2022:
          - 5.25
          - 5.12
          - 5.13
          - 5.10
      tags:
        - vulnerability-mgmt
        - vmm-measurements
    Treatment of defects per protection requirement:
      uuid: 123e4567-e89b-12d3-a456-426614174000
      risk: |-
        Not defining the protection requirement of applications can lead to wrong prioritization, delayed remediation of 
        critical security issues, increasing the risk of exploitation and potential damage to the organization.
      measure: |-
        Defining the protection requirement and the corresponding handling of vulnerabilities per severity for components like applications are aligned to SLAs. 
         This is performed for the hole organization and doesn't need to be broken down (yet) on team/product/application. 
         At least quarterly.
      description: |-
        The protection requirements for an application should consider:
        - Data criticality
        - Application accessibility (internal vs. external)
        - Regulatory compliance
        - Other relevant factors
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 3
      level: 3
      dependsOn: []
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/owasp-defectdojo
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/purify
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/business-friendly-vulnerability-metrics
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/defectdojo-client
      references:
        samm2:
          - I-DM-3-B
        iso27001-2022:
          - 5.25
          - 5.12
          - 5.13
          - 5.10
      tags:
        - vulnerability-mgmt
        - metrics
        - vmm-measurements

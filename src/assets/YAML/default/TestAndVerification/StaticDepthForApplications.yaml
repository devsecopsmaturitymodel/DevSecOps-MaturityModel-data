# yaml-language-server: $schema=../../schemas/dsomm-schema-test-and-verification.json
---
Test and Verification:
  Static depth for applications:
    Exclusion of source code duplicates: &Exclusion-of-source-code-duplicates
      uuid: d17dbff0-1f10-492a-b4c7-17bb59a0a711
      risk: Duplicates in source code might influence the stability of the application.
      measure: Automatic Detection and manual removal of duplicates in source code.
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 1
      level: 5
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/pmd
      dependsOn:
        - Defined build process
      references:
        samm2:
          - V-ST-A-2
        iso27001-2017:
          - Not explicitly covered by ISO 27001 - too specific
          - 14.2.1
          - 14.2.5
        iso27001-2022:
          - Not explicitly covered by ISO 27001 - too specific
          - 8.25
          - 8.27
      comments: ""
    Test libyear:
      <<: *Exclusion-of-source-code-duplicates
      uuid: 87b54313-fafd-4860-930f-5ef132b3e4ad
      risk: Vulnerabilities in running artifacts stay for long and might get exploited.
      measure: |-
        Test `libyear`, which provides a good insight how good patch management is.
      usefulness: 3
      level: 2
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/libyear
      meta:
        implementationGuide: |
          `libyear` can be integrated into the build process and flag or even better break the build in case the defined threshold (e.g. 30 years) is reached.
          An alternative approach is to determine `libyear` based on deployed artifacts (which requires more effort in implementation).
      tags:
        - patching
    Test for Time to Patch:
      <<: *Exclusion-of-source-code-duplicates
      uuid: 13af1227-3dd1-4d4f-a9e9-53deb793c18f
      risk: Automatic PRs for dependencies are overlooked resulting in known vulnerabilities in production artifacts.
      measure: |-
        Test of the Time to Patch (e.g. based on Mean Time to Close automatic PRs)
        This activity is not repeated in the Sub-Dimension "Static depth for infrastructure", but it applies to infrastructure as well.
      usefulness: 3
      level: 2
      dependsOn:
        - Automated PRs for patches
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/dependabot
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/renovate
      meta:
        implementationGuide:
          Usage of a version control platform API (e.g. github API) can be used to fetch the information.
          Consider that `Measure libyears` might be an alternative to this activity.
      tags:
        - patching
    Test for Patch Deployment Time:
      <<: *Exclusion-of-source-code-duplicates
      uuid: 0cb2c39a-3cec-4353-b3ab-8d70daf4c9d2
      risk: Automatic PRs for dependencies are overlooked resulting in known vulnerabilities in production artifacts.
      dependsOn:
        - Automated PRs for patches
        - Defined build process
      measure: |
        Test of the Patch Deployment Time.
        This activity is not repeated in the Sub-Dimension "Static depth for infrastructure", but it applies to infrastructure as well.
      usefulness: 3
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      level: 3
      meta:
        implementationGuide:
          Self implementation.
          This activity is not repeated in the Sub-Dimension "Static depth for infrastructure", but it applies to infrastructure as well.
      tags:
        - patching
    Dead code elimination:
      <<: *Exclusion-of-source-code-duplicates
      uuid: a8d7d1f1-fc24-49ab-8fb6-f3a03da9c61d
      risk:
        Dead code increases the attack surface (use of hard coded credentials and
        variables, sensitive information)
      measure: Collection of unused code and then manual removal of unused code.
    Local development security checks performed:
      uuid: 6e180abc-7c98-4265-b4e9-852cb91b067b
      risk: Creating and developing code contains code smells and quality issues.
      measure: |
        Integration of quality and linting plugins with interactive development environment (IDEs).
        Implement pre-commit checks to prevent secrets & other security issues being commit to source code.
      difficultyOfImplementation:
        knowledge: 2
        time: 1
        resources: 1
      usefulness: 4
      level: 3
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/fortify-vscode-extension
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/checkmarx-vscode-extension
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/appscan-vscode-extension
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/pre-commit-microsoft
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/pre-commit-synopsis
      references:
        samm2:
          - V-ST-A-1
        iso27001-2017:
          - Hardening is not explicitly covered by ISO 27001 - too specific
          - 13.1.3
        iso27001-2022:
          - Hardening is not explicitly covered by ISO 27001 - too specific
          - 8.22
      isImplemented: false
      evidence: ""
      comments: ""
    API design validation:
      uuid: 017d9e26-42b5-49a4-b945-9f59b308fb99
      risk: Creation of insecure or non-compliant API.
      measure: |
        Design contract-first APIs using an interface description language such as OpenAPI, AsyncAPI or SOAP
        and validate the specification using specific tools.
        Checks should be integrated in IDEs and CI/CD pipelines.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 3
      level: 3
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/stoplight-spectral
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/api-oas-checker
      references:
        samm2:
          - V-ST-A-1
        iso27001-2017:
          - 14.2.1
          - 14.2.5
        iso27001-2022:
          - 8.25 # Secure development lifecycle
          - 8.27 # Secure system architecture and engineering principles
          - 8.28 # Secure coding
      isImplemented: false
      dependsOn:
        - uuid:2a44b708-734f-4463-b0cb-86dc46344b2f # Inventory of production components
    Static analysis for all components/libraries:
      uuid: f4ff841d-3b2a-45d9-853e-5ec7ecbcb054
      risk: Used components like libraries and legacy applications might have vulnerabilities
      measure: Usage of a static analysis for all used components.
      difficultyOfImplementation:
        knowledge: 2
        time: 4
        resources: 2
      usefulness: 3
      level: 5
      dependsOn:
        - Static analysis for important client side components
        - Static analysis for important server side components
        - uuid:2a44b708-734f-4463-b0cb-86dc46344b2f # Inventory of production components
      implementation: []
      references:
        samm2:
          - V-ST-A-2
          - I-SB-B-3
        iso27001-2017:
          - 12.6.1
        iso27001-2022:
          - 8.8
      isImplemented: false
      evidence: ""
      comments: ""
    Static analysis for all self written components:
      uuid: ee68331f-9b1d-4f61-844b-b2ea04753a84
      risk: Parts in the source code of the frontend or middleware have vulnerabilities.
      measure:
        Usage of static analysis tools for all parts of the middleware and
        frontend. Static analysis uses for example string matching algorithms and/or
        dataflow analysis.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 4
      level: 4
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/eslint
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/findsecuritybugs
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/jsprime
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/fortify-vscode-extension
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/checkmarx-vscode-extension
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/appscan-vscode-extension
      dependsOn:
        - Static analysis for important client side components
        - Static analysis for important server side components
        - uuid:2a44b708-734f-4463-b0cb-86dc46344b2f # Inventory of production components
      references:
        samm2:
          - V-ST-A-2
          - I-SB-B-3
        iso27001-2017:
          - 12.6.1
        iso27001-2022:
          - 8.8
      isImplemented: false
      evidence: ""
      comments: ""
    Static analysis for important client side components:
      uuid: e237176b-bec5-447d-a926-e37d6dd60e4b
      risk: Important parts in the source code of the frontend have vulnerabilities.
      measure:
        Usage of static analysis tools for important parts of the frontend
        are used. Static analysis uses for example string matching algorithms and/or
        dataflow analysis.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 3
      level: 3
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/eslint
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/findsecuritybugs
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/jsprime
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/bdd-mobile-security
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/fortify-vscode-extension
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/checkmarx-vscode-extension
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/appscan-vscode-extension
      dependsOn:
        - Defined build process
        - uuid:2a44b708-734f-4463-b0cb-86dc46344b2f # Inventory of production components
      references:
        samm2:
          - V-ST-A-2
        iso27001-2017:
          - 12.6.1
        iso27001-2022:
          - 8.8
      isImplemented: false
      evidence: ""
      comments: ""
    Static analysis for important server side components:
      uuid: 6c05c837-8c99-46e2-828b-7c903e27dba4
      risk: Important parts in the source code of the middleware have vulnerabilities.
      measure:
        Usage of static analysis tools for important parts of the middleware
        are used. Static analysis uses for example string matching algorithms and/or
        dataflow analysis.
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 1
      usefulness: 4
      level: 3
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/eslint
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/findsecuritybugs
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/jsprime
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/fortify-vscode-extension
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/checkmarx-vscode-extension
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/appscan-vscode-extension
      dependsOn:
        - Defined build process
        - uuid:2a44b708-734f-4463-b0cb-86dc46344b2f # Inventory of production components
      references:
        samm2:
          - V-ST-A-2
          - I-SB-B-3
        iso27001-2017:
          - 12.6.1
        iso27001-2022:
          - 8.8
      isImplemented: false
      evidence: ""
      comments: ""
    Stylistic analysis:
      uuid: efa52cc8-6c5c-4ba2-a3d2-7164b0402f34
      risk: Unclear or obfuscated code might have unexpected behavior.
      measure:
        Analysis of compliance to style guides of the source code ensures that
        source code formatting rules are met (e.g. indentation, loops, ...).
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 1
      level: 5
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/pmd
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/stylecop
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/sonarqube
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/github-super-linter
      references:
        samm2:
          - V-ST-A-2
        iso27001-2017:
          - 12.6.1
          - 14.2.1
          - 14.2.5
        iso27001-2022:
          - 8.8
          - 8.25
          - 8.27
      isImplemented: false
      evidence: ""
      comments: ""
    Exploit likelihood estimation:
      uuid: f2f0f274-c1a0-4501-92fe-7fc4452bc8ad
      risk: |-
        Without proper prioritization, organizations may waste time and effort on low-risk vulnerabilities while neglecting critical ones.
      measure: Estimate the likelihood of exploitation by using data (CISA KEV) from the past or prediction models (EPSS).
      difficultyOfImplementation:
        knowledge: 2
        time: 2
        resources: 2
      usefulness: 4
      level: 3
      dependsOn:
        - uuid:d918cd44-a972-43e9-a974-eff3f4a5dcfe # SCA for server
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/cisa-kev
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/epss
      references:
        samm2:
          - V-ST-A-2
          - I-SB-B-3
        iso27001-2017:
          - 12.6.1
        iso27001-2022:
          - 8.8
    Software Composition Analysis (client side):
      uuid: 07fe8c4f-ae33-4409-b1b2-cf64cfccea86
      risk: Client side components might have vulnerabilities.
      measure: Tests for known vulnerabilities in components via Software Composition Analysis of the frontend are performed.
      difficultyOfImplementation:
        knowledge: 1
        time: 2
        resources: 1
      usefulness: 2
      level: 3
      dependsOn:
        - Defined build process
        - uuid:2a44b708-734f-4463-b0cb-86dc46344b2f # Inventory of production components
        - uuid:f2f0f274-c1a0-4501-92fe-7fc4452bc8ad # EPSS/CISA KEV
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/retire-js
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/npm-audit
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/dependencyTrack
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/github-dependabot
      references:
        samm2:
          - V-ST-A-2
          - I-SB-B-2
        iso27001-2017:
          - 12.6.1
        iso27001-2022:
          - 8.8
      isImplemented: false
      evidence: ""
      comments: ""
    Software Composition Analysis (server side):
      uuid: d918cd44-a972-43e9-a974-eff3f4a5dcfe
      description: Use a tool like trivy and concentrate on application related vulnerabilities. At this stage, ignore vulnerabilities in container base images used in the service.
      risk: Server side components might have vulnerabilities.
      measure:
        Tests for known vulnerabilities in server side components (e.g. backend/middleware)
        are performed.
      difficultyOfImplementation:
        knowledge: 1
        time: 3
        resources: 1
      usefulness: 5
      level: 2
      dependsOn:
        - Defined build process
        - uuid:2a44b708-734f-4463-b0cb-86dc46344b2f # Inventory of production components
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/owasp-dependency-che
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/dependencyTrack
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/retire-js
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/npm-audit
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/github-dependabot
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/trivy
      references:
        samm2:
          - V-ST-A-2
          - I-SB-B-2
        iso27001-2017:
          - 12.6.1
        iso27001-2022:
          - 8.8
      tags:
        - vmm-testing
    Usage of multiple analyzers:
      uuid: 297be001-8d94-41ee-ab29-207020d423c0
      risk:
        Each vulnerability analyzer has different opportunities. By using just
        one analyzer, some vulnerabilities might not be found.
      measure: Usage of multiple static tools to find more vulnerabilities.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 5
      usefulness: 1
      level: 4
      dependsOn:
        - Software Composition Analysis (server side)
        - Software Composition Analysis (client side)
        - Static analysis for all self written components
      implementation: []
      references:
        samm2:
          - V-ST-A-3
        iso27001-2017:
          - 12.6.1
          - 14.2.1
          - 14.2.5
        iso27001-2022:
          - 8.8
          - 8.25
          - 8.27
      isImplemented: false
      evidence: ""
      comments: ""

# yaml-language-server: $schema=../../schemas/dsomm-schema-culture-and-organization.json
---
Culture and Organization:
  Education and Guidance:
    Ad-Hoc Security trainings for software developers:
      uuid: 12c90cc6-3d58-4d9b-82ff-d469d2a0c298
      risk:
        Understanding security is hard and personnel needs to be trained on it.
        Otherwise, flaws like an SQL Injection might be introduced into the software
        which might get exploited.
      measure:
        Provide security awareness training for all personnel involved in software
        development Ad-Hoc.
      difficultyOfImplementation:
        knowledge: 2
        time: 1
        resources: 1
      usefulness: 3
      level: 1
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/owasp-juice-shop
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/owasp-cheatsheet-series
      references:
        samm2:
          - G-EG-A-1
        iso27001-2017:
          - 7.2.2
        iso27001-2022:
          - 6.3
    Office Hours:
      uuid: 185d5a74-19dc-4422-be07-44ea35226783
      risk:
        Developers and Operations are not in contact with the security team and therefore do not ask prior implementation of (known or unknown) threats-
      measure:
        As a security team, be open for questions and hints during defined office hours. x x d
      difficultyOfImplementation:
        knowledge: 1
        time: 1
        resources: 1
      usefulness: 3
      level: 3
      implementation:
      references:
        samm2:
          - G-EG-A-1
        iso27001-2017:
          - 7.2.2
        iso27001-2022:
          - 6.3
    Security Coaching:
      uuid: f7b215dc-73a4-4c61-9e49-b3a3af1c9ac3
      risk: Training does not change behaviour. Therefore, even if security practices are understood, it's likely that they are not performed.
      measure: By coaching teams on security topics using for example the samman coaching method, teams internalize security practices as new habits in their development process.
      difficultyOfImplementation:
        knowledge: 4
        time: 3
        resources: 1 # e.g. system resources
      usefulness: 3
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/sammancoaching
      level: 3
      references:
        samm2:
          - G-EG-B-3
        iso27001-2017:
          - 7.1.1
        iso27001-2022:
          - 6.1
      isImplemented: false
      evidence: ""
      comments: ""
    Aligning security in teams:
      uuid: f994a55d-71bb-45a4-a887-0a213d72c504
      risk:
        The concept of Security Champions might suggest that only he/she is responsible
        for security. However, everyone in the project team should be responsible
        for security.
      measure:
        By aligning security Subject Matter Experts with project teams, a higher security standard
        can be achieved.
      difficultyOfImplementation:
        knowledge: 4
        time: 4
        resources: 1
      usefulness: 5
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/involve-security-sme
      level: 4
      references:
        samm2:
          - G-EG-B-3
        iso27001-2017:
          - 7.1.1
        iso27001-2022:
          - 6.1
      isImplemented: false
      evidence: ""
      comments: ""
    Conduction of build-it, break-it, fix-it contests:
      uuid: bfdb576e-a416-4ec6-96fe-a078d58b2ff8
      risk:
        Understanding security is hard, even for security champions and the conduction
        of security training often focuses on breaking a component instead of building
        a component secure.
      measure:
        The build-it, break-it, fix-it contest allows to train people with
        security related roles like security champions the build, break and fix part
        of a secure application. This increases the learning of building secure components.
      difficultyOfImplementation:
        knowledge: 5
        time: 3
        resources: 1
      usefulness: 3
      level: 3
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/build-it-break-it-fi
      references:
        samm2:
          - G-EG-A-2
        iso27001-2017:
          - 7.2.2
        iso27001-2022:
          - 6.3
      isImplemented: false
      evidence: ""
      comments: ""
    Conduction of collaborative security checks with developers and system administrators:
      uuid: 95caef96-36ed-458c-a087-5c35d4f9dec2
      risk:
        Security checks by external companies do not increase the understanding
        of an application/system for internal employees.
      measure:
        Periodically security reviews of source code (SCA), in which security
        SME, developers and operations are involved, are effective at increasing the
        robustness of software and the security knowledge of the teams involved.
      difficultyOfImplementation:
        knowledge: 3
        time: 2
        resources: 1
      usefulness: 3
      level: 5
      implementation: []
      references:
        samm2:
          - G-EG-A-2
          - G-EG-B-2
        iso27001-2017:
          - Mutual review of source code is not explicitly required in ISO 27001 may
            be
          - 7.2.2
          - 12.6.1
          - 12.7.1
        iso27001-2022:
          - Mutual review of source code is not explicitly required in ISO 27001 may
            be
          - 6.3
          - 8.8
          - 8.34
      isImplemented: false
      evidence: ""
      comments: ""
    Conduction of collaborative team security checks:
      uuid: 35446784-7610-40d9-af9e-d43f3173bf8c
      risk: Development teams limited insight over security practices.
      measure:
        Mutual security testing the security of other teams project enhances
        security awareness and knowledge.
      difficultyOfImplementation:
        resources: 2
        knowledge: 4
        time: 4
      usefulness: 2
      level: 4
      implementation: []
      references:
        samm2:
          - G-EG-A-1
          - G-EG-A-2
        iso27001-2017:
          - Mutual security testing is not explicitly required in ISO 27001 may be
          - 7.2.2
        iso27001-2022:
          - Mutual security testing is not explicitly required in ISO 27001 may be
          - 6.3
      isImplemented: false
      evidence: ""
      comments: ""
    Conduction of war games:
      uuid: 534f60bf-0995-4314-bb9c-f0f2bf204694
      risk: Understanding incident response plans during an incident is hard and ineffective.
      measure:
        War Games like activities help train for incidents. Security SMEs create
        attack scenarios in a testing environment enabling the trainees to learn how
        to react in case of an incident.
      difficultyOfImplementation:
        knowledge: 4
        time: 5
        resources: 4
      usefulness: 3
      level: 4
      implementation: []
      references:
        samm2:
          - G-EG-A-2
          - O-IM-B-2
        iso27001-2017:
          - War games are not explicitly required in ISO 27001 may be
          - 7.2.2
          - 16.1
          - 16.1.5
        iso27001-2022:
          - War games are not explicitly required in ISO 27001 may be
          - 6.3
          - 5.24
          - 5.26
      isImplemented: false
      evidence: ""
      comments: ""
    Each team has a security champion:
      uuid: 6217fe11-5ed7-4cf4-9de4-555bcfa6fe87
      risk:
        No one feels directly responsible for security and the security champion
        does not have enough time to allocate to each team.
      measure:
        Each team defines an individual to be responsible for security. These
        individuals are often referred to as 'security champions'
      difficultyOfImplementation:
        knowledge: 3
        time: 2
        resources: 1
      usefulness: 4
      level: 2
      description: |
        Implement a program where each software development team has a member considered a "Security Champion" who is the liaison between Information Security and developers. Depending on the size and structure of the team the "Security Champion" may be a software developer, tester, or a product manager. The "Security Champion" has a set number of hours per week for Information Security related activities. They participate in periodic briefings to increase awareness and expertise in different security disciplines. "Security Champions" have additional training to help develop these roles as Software Security subject-matter experts. You may need to customize the way you create and support "Security Champions" for cultural reasons.
        
        The goals of the position are to increase effectiveness and efficiency of application security and compliance and to strengthen the relationship between various teams and Information Security. To achieve these objectives, "Security Champions" assist with researching, verifying, and prioritizing security and compliance related software defects. They are involved in all Risk Assessments, Threat Assessments, and Architectural Reviews to help identify opportunities to remediate security defects by making the architecture of the application more resilient and reducing the attack threat surface.
        
        [Source: OWASP SAMM](https://owaspsamm.org/model/governance/education-and-guidance/stream-b/)
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/owasp-security-champ
      references:
        samm2:
          - G-EG-B-1
          - G-EG-B-2
        iso27001-2017:
          - Security champions are missing in ISO 27001 most likely
          - 7.2.1
          - 7.2.2
        iso27001-2022:
          - Security champions are missing in ISO 27001 most likely
          - 5.4
          - 6.3
      isImplemented: false
      evidence: ""
      comments: ""
    Regular security training for all:
      uuid: 9768f154-357a-4c06-af6f-d66570677c9b
      risk: Understanding security is hard.
      measure:
        Provide security awareness training for all internal personnel involved
        in software development on a regular basis like twice in a year for 1-3 days.
      difficultyOfImplementation:
        knowledge: 3
        time: 4
        resources: 2
      usefulness: 4
      level: 2
      description: |
        Conduct security awareness training for all roles currently involved in the management, development, testing, or auditing of the software. The goal is to increase the awareness of application security threats and risks, security best practices, and secure software design principles. Develop training internally or procure it externally. Ideally, deliver training in person so participants can have discussions as a team, but Computer-Based Training (CBT) is also an option.

        Course content should include a range of topics relevant to application security and privacy, while remaining accessible to a non-technical audience. Suitable concepts are secure design principles including Least Privilege, Defense-in-Depth, Fail Secure (Safe), Complete Mediation, Session Management, Open Design, and Psychological Acceptability. Additionally, the training should include references to any organization-wide standards, policies, and procedures defined to improve application security. The OWASP Top 10 vulnerabilities should be covered at a high level.

        Training is mandatory for all employees and contractors involved with software development and includes an auditable sign-off to demonstrate compliance. Consider incorporating innovative ways of delivery (such as gamification) to maximize its effectiveness and combat desensitization.

        [Source: OWASP SAMM 2](https://owaspsamm.org/model/governance/education-and-guidance/stream-a/)
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/owasp-juice-shop
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/owasp-cheatsheet-series
      references:
        samm2:
          - G-EG-A-1
        iso27001-2017:
          - 7.2.2
        iso27001-2022:
          - 6.3
      isImplemented: false
      evidence: ""
      comments: ""
    Regular security training for externals:
      uuid: 31833d56-35af-4ef3-9300-f23d27646ce7
      risk: Understanding security is hard.
      measure:
        Provide security awareness training for all personnel including externals
        involved in software development on a regular basis.
      difficultyOfImplementation:
        knowledge: 3
        time: 2
        resources: 3
      usefulness: 4
      level: 4
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/owasp-juice-shop
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/owasp-cheatsheet-series
      references:
        samm2:
          - G-EG-A-2
        iso27001-2017:
          - 7.2.2
        iso27001-2022:
          - 6.3
      isImplemented: false
      evidence: ""
      comments: ""
    Regular security training of security champions:
      uuid: f88d1b17-3d7d-4c3d-8139-ad44fc4942d4
      risk: Understanding security is hard, even for security champions.
      measure: Regular security training of security champions.
      assessment: |
        - Process Documentation: TODO
        - Training Content: TOODO
      difficultyOfImplementation:
        knowledge: 4
        time: 2
        resources: 2
      usefulness: 5
      level: 2
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/owasp-cheatsheet-series
      dependsOn:
        - Each team has a security champion
      references:
        samm2:
          - D-TA-B-2
          - G-EG-A-1
        iso27001-2017:
          - Security champions are missing in ISO 27001
          - 7.2.2
        iso27001-2022:
          - Security champions are missing in ISO 27001
          - 6.3
      isImplemented: false
      evidence: ""
      comments: ""
    Reward of good communication:
      uuid: 91b6f75b-9f4a-4d77-95a2-af7ad3222c7c
      risk: Employees are not getting excited about security.
      measure:
        Good communication and transparency encourages cross-organizational
        support. Gamification of security is also known to help, examples include
        T-Shirts, mugs, cups, gift cards and 'High-Fives'.
      difficultyOfImplementation:
        knowledge: 3
        time: 2
        resources: 1
      usefulness: 3
      level: 2
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/motivate-people
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/owasp-top-10-maturit
      references:
        samm2:
          - G-EG-B-1
        iso27001-2017:
          - not required by ISO 27001
          - interestingly enough A7.2.3 is requiring a process to handle misconduct
            but nothing to promote good behavior.
        iso27001-2022:
          - ISO 27001:2022 mapping is missing
      isImplemented: false
      evidence: ""
      comments: ""
    Security code review:
      uuid: 7121b0c7-6ace-4d6b-95d0-94535dbccb57
      risk: Understanding security is hard.
      measure: |
        The following areas of code tend to have a high-risk of containing security vulnerabilities:
          - Crypto implementations / usage
          - Parser, unparser
          - System configuration
          - Authentication, authorization
          - Session management
          - Request throttling
          - :unicorn: (self-developed code, only used in that one software)
      description: |
        ### Benefits
        - New vulnerabilities may be found before reaching production.
        - Old vulnerabilities are found and fixed.
      assessment: |
        - Present the performed reviews (including participants, findings, consequences) and assess whether it is reasonable.
      difficultyOfImplementation:
        knowledge: 3
        time: 2
        resources: 1
      usefulness: 3
      level: 2
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/cwe25
      credits: |
        AppSecure-nrw [Security Belts](https://github.com/AppSecure-nrw/security-belts/)
      references:
        samm2:
          - V-ST-B-1
        iso27001-2017:
          - ISO 27001:2017 mapping is missing
        iso27001-2022:
          - ISO 27001:2022 mapping is missing
      isImplemented: false
      evidence: ""
      comments: ""
    Security consulting on request:
      uuid: 0b28367b-75a0-4bae-a926-3725c1bf9bb0
      risk:
        Not asking a security expert when questions regarding security appear
        might lead to flaws.
      measure:
        Security consulting to teams is given on request. The security consultants
        can be internal or external.
      difficultyOfImplementation:
        knowledge: 3
        time: 1
        resources: 1
      usefulness: 3
      level: 1
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/owasp-cheatsheet-series
      references:
        samm2:
          - G-EG-A-1
          - G-EG-B-1
        iso27001-2017:
          - security consulting is missing in ISO 27001 may be
          - 6.1.1
          - 6.1.4
          - 6.1.5
        iso27001-2022:
          - Security consulting is missing in ISO 27001 may be
          - 5.2
          - 5.6
          - 5.8
      isImplemented: false
      evidence: ""
      comments: ""
    Security-Lessoned-Learned:
      uuid: 58c46807-fee9-448b-b6dd-8050c464ab52
      risk: After an incident, a similar incident might reoccur.
      measure:
        Running a 'lessons learned' session after an incident helps drive continuous
        improvement. Regular meetings with security champions are a good place to
        share and discuss lessons learned.
      difficultyOfImplementation:
        knowledge: 3
        time: 3
        resources: 1
      usefulness: 3
      level: 3
      implementation: []
      references:
        samm2:
          - G-EG-B-3
          - O-IM-B-3
        iso27001-2017:
          - 16.1.6
        iso27001-2022:
          - 5.27
      isImplemented: false
      evidence: ""
      comments: ""
    Simple mob hacking:
      uuid: 535f301a-e8e8-4eda-ad77-a08b035c92de
      risk: Understanding security is hard.
      measure: |
        Participate with your whole team in a simple mob hacking session organized by the Security Champion Guild.
        In the session the guild presents a vulnerable application and together you look at possible exploits.
        Just like in mob programming there is one driver and several navigators.
      description: |
        ### Guidelines for your simple mob hacking session
        - All exploits happen via the user interface.
        - No need for security/hacking tools.
        - No need for deep technical or security knowledge.
        - Use an insecure training app, e.g., [DVWA](https://dvwa.co.uk/) or [OWASP Juice Shop](https://owasp.org/www-project-juice-shop/).
        - Encourage active participation, e.g., use small groups.
        - Allow enough time for everyone to run at least one exploit.

        ### Benefits
        - The team gets an idea of how exploits can look like and how easy applications can be attacked.
        - The team understands functional correct working software can be highly insecure and easy to exploit.
      difficultyOfImplementation:
        knowledge: 5
        time: 3
        resources: 1
      usefulness: 3
      level: 3
      credits: |
        AppSecure-nrw [Security Belts](https://github.com/AppSecure-nrw/security-belts/)
      implementation:
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/owasp-juice-shop
        - $ref: src/assets/YAML/default/implementations.yaml#/implementations/damn-vulnerable-web
      references:
        samm2:
          - G-EG-A-2
        iso27001-2017:
          - 7.2.2
        iso27001-2022:
          - 6.3
      isImplemented: false
      evidence: ""
      comments: ""
